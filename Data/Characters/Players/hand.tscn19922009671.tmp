[gd_scene load_steps=6 format=3 uid="uid://cjytdrcs8ffll"]

[ext_resource type="Script" uid="uid://dx85212bxya46" path="res://Data/Players/hand.gd" id="1_po0mp"]
[ext_resource type="Script" uid="uid://btw88k7wd5pba" path="res://Data/Players/fall.gd" id="2_t37my"]

[sub_resource type="RectangleShape2D" id="RectangleShape2D_c322u"]
size = Vector2(18, 9)

[sub_resource type="GDScript" id="GDScript_k1fy1"]
script/source = "##State_Machine 1.0.0 

extends Node
class_name StateMachine


# Nodo encargado de administrar la State_Machine
@onready var controlador = self.owner
@onready var state = get_node (initial_state)
##Estado Inicial por defecto.
##Permite seleccionar la ruta del estado
@export_node_path('Node') var initial_state

#Obtiene el nodo para trabajar con èl 
#State que se esta ejecutando 


##DEBUG
@export var DEBUG : bool = true
##Si el valor es true , imprime en consola el historial de Estados
@export var PRINT_HISTORY : bool = false 
var initialized = false
#Historial de Estados seleccioandos
var history : Array [String] 


# Called when the node enters the scene tree for the first time.
func _ready() -> void:
	
	#Espera que los nodos esten listos antes de ejecutar el metodo
	call_deferred(\"_enter_state\")
	pass # Replace with function body.

func _enter_state():
	if DEBUG:
		print (controlador.name, \": Entrando en estado :\", state.name)
	
	state.player = controlador
	state.state_machine = self
	state.enter()
	initialized = true 
	
	##Crea la comunicación entre los Nodos de la Maquina
func change_to (new_state):
	
	history.append(state.name)
	state = get_node(new_state)
	_enter_state()
	if PRINT_HISTORY :
		print(history)


func _process(delta: float) -> void:
	if state.has_method(\"process\"):
		state.process(delta)
	

func _physics_process(delta: float) -> void:
	if initialized && state.has_method(\"physics_process\"):
		
		state.physics_process(delta)
		
		
func _input(event:InputEvent) -> void:
	if state.has_method(\"input\"):
		state.input(event)

	
"

[sub_resource type="GDScript" id="GDScript_t37my"]
script/source = "extends PlayerState


func enter ():
	if player.is_on_floor():
		update_idle_animations()
	else :
		state_machine.change_to(\"Fall\")
	
func update_idle_animations () -> void :
	
	match player.current_direction:  
		player.direction.left :
			player.anim_movement.play(\"move_left\")
		player.direction.right : 
			player.anim_movement.play(\"move_left\")

func physics_process(delta: float) -> void:
		if not player.is_on_floor():
			state_machine.change_to(\"Fall\")
		elif  Input.is_action_just_pressed(\"W\") and player.is_on_floor():
			player.velocity.y = player.JUMP_VELOCITY
			
		elif  Input.is_action_just_pressed(\"A\") and player.is_on_floor():
			state_machine.change_to(\"Move\")
		elif Input.is_action_just_pressed(\"D\") and player.is_on_floor():
			state_machine.change_to(\"Move\")
		
		
"

[node name="Hand" type="CharacterBody2D"]
collision_mask = 3
script = ExtResource("1_po0mp")

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2(0, -5.5)
shape = SubResource("RectangleShape2D_c322u")

[node name="StateMachine" type="Node" parent="."]
script = SubResource("GDScript_k1fy1")
initial_state = NodePath("Idle")

[node name="Idle" type="Node" parent="StateMachine"]
script = SubResource("GDScript_t37my")
metadata/_custom_type_script = "uid://yywb8dn7ccs2"

[node name="Move" type="Node" parent="StateMachine"]

[node name="Jump" type="Node" parent="StateMachine"]

[node name="Fall" type="Node" parent="StateMachine"]
script = ExtResource("2_t37my")

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]

[node name="AnimatedSprite2D" type="AnimatedSprite2D" parent="."]
